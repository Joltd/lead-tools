/* Generated By:JavaCC: Do not edit this line. Query.java */
package com.evgenltd.lt.component.query;

import com.evgenltd.lt.entity.Type;
import java.io.InputStream;
import java.util.Map;
import java.util.Objects;import java.util.function.Function;

public class Query implements QueryConstants {

    private Function<String,Value> resolveAttribute;

    public Query(final Function<String,Value> resolveAttribute, final InputStream stream) {
        this(stream);
        this.resolveAttribute = resolveAttribute;
    }

    private String removeFirstAndLast(final String value) {
        if (value == null) {
            return null;
        }

        if (value.length() <= 2) {
            return "";
        }

        return value.substring(1, value.length() - 1);
    }

  final public boolean match() throws ParseException {
    trace_call("match");
    try {
      {if (true) return expression();}
      jj_consume_token(EOL);
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("match");
    }
  }

  final private boolean expression() throws ParseException {
    trace_call("expression");
    try {
    boolean result, temp;
      result = condition();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
        case AND:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OR:
          jj_consume_token(OR);
          temp = condition();
          result = result || temp;
          break;
        case AND:
          jj_consume_token(AND);
          temp = condition();
          result = result && temp;
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("expression");
    }
  }

  final private boolean condition() throws ParseException {
    trace_call("condition");
    try {
    Value left,right;
    Operator operator;
    boolean result;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case BOOL:
      case NUMBERS:
      case STRING:
      case ATTRIBUTE:
        left = value();
        operator = operator();
        right = value();
      {if (true) return Comparison.compare(left, operator, right);}
        break;
      case NOT:
        jj_consume_token(NOT);
        jj_consume_token(LPAR);
        result = expression();
        jj_consume_token(RPAR);
      {if (true) return !result;}
        break;
      case LPAR:
        jj_consume_token(LPAR);
        result = expression();
        jj_consume_token(RPAR);
      {if (true) return result;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("condition");
    }
  }

  final private Operator operator() throws ParseException {
    trace_call("operator");
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
      {if (true) return Operator.E;}
        break;
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
      {if (true) return Operator.N_E;}
        break;
      case GREATER:
        jj_consume_token(GREATER);
      {if (true) return Operator.G;}
        break;
      case LESS:
        jj_consume_token(LESS);
      {if (true) return Operator.L;}
        break;
      case GREATER_EQUALS:
        jj_consume_token(GREATER_EQUALS);
      {if (true) return Operator.GE;}
        break;
      case LESS_EQUALS:
        jj_consume_token(LESS_EQUALS);
      {if (true) return Operator.LE;}
        break;
      case LIKE:
        jj_consume_token(LIKE);
      {if (true) return Operator.LIKE;}
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("operator");
    }
  }

  final private Value value() throws ParseException {
    trace_call("value");
    try {
    Token token;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ATTRIBUTE:
        token = jj_consume_token(ATTRIBUTE);
      {if (true) return resolveAttribute.apply(removeFirstAndLast(token.image));}
        break;
      case NULL:
        jj_consume_token(NULL);
      {if (true) return new Value(null,null);}
        break;
      case NUMBERS:
        token = jj_consume_token(NUMBERS);
      {if (true) return new Value(token.image, Type.NUMBER);}
        break;
      case STRING:
        token = jj_consume_token(STRING);
      {if (true) return new Value(removeFirstAndLast(token.image), Type.STRING);}
        break;
      case BOOL:
        token = jj_consume_token(BOOL);
      {if (true) return new Value(token.image, Type.BOOLEAN);}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    throw new Error("Missing return statement in function");
    } finally {
      trace_return("value");
    }
  }

  /** Generated Token Manager. */
  public QueryTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000,0x6000,0x1f8010,0x1fc0,0x1f0000,};
   }

  /** Constructor with InputStream. */
  public Query(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Query(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new QueryTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Query(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new QueryTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Query(QueryTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(QueryTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[21];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 21; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

}
