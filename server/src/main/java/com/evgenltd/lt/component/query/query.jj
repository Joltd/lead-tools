options {
    STATIC = false;
    DEBUG_PARSER = true;
}

PARSER_BEGIN(Query)

package com.evgenltd.lt.component.query;

import com.evgenltd.lt.entity.Type;
import java.io.InputStream;
import java.util.Map;
import java.util.Objects;import java.util.function.Function;

public class Query {

    private Function<String,Value> resolveAttribute;

    public Query(final Function<String,Value> resolveAttribute, final InputStream stream) {
        this(stream);
        this.resolveAttribute = resolveAttribute;
    }

    private String removeFirstAndLast(final String value) {
        if (value == null) {
            return null;
        }

        if (value.length() <= 2) {
            return "";
        }

        return value.substring(1, value.length() - 1);
    }


}

PARSER_END(Query)

SKIP: {
    <SPACE: " ">
}
TOKEN: {
    <EOL: "\n" | "\r" | "\r\n">
}
TOKEN : {
    <QUOTE: "'">
    | <LPAR: "(">
    | <RPAR: ")">
}
TOKEN : {
    <EQUALS: "=">
    | <NOT_EQUALS: "!=">
    | <GREATER: ">">
    | <LESS: "<">
    | <GREATER_EQUALS: ">=">
    | <LESS_EQUALS: "<=">
    | <LIKE: "~">
    | <OR: "||">
    | <AND: "&&">
    | <NOT: "!">
}
TOKEN : {
    <NULL: "null">
    | <BOOL: ("true"|"false")>
    | <NUMBERS: (["0"-"9"])+>
    | <STRING: "'"(~["'","[","]","(",")"])+"'">
    | <ATTRIBUTE: "["(["a"-"z","A"-"Z","0"-"9"," "])+"]">
}

boolean match():
{}
{
    { return expression(); }
    <EOL> 
}

private boolean expression():
{
    boolean result, temp;
}
{

    result = condition()
    (
        <OR>
        temp = condition()
        { result = result || temp; }
        |
        <AND>
        temp = condition()
        { result = result && temp; }
    )*
    { return result; }

}

private boolean condition():
{
    Value left,right;
    Operator operator;
    boolean result;
}
{
    left = value()
    operator = operator()
    right = value()
    { return Comparison.compare(left, operator, right); }
    |
    <NOT> <LPAR> result = expression() <RPAR>
    { return !result; }
    |
    <LPAR> result = expression() <RPAR>
    { return result; }

}

private Operator operator():
{}
{
    <EQUALS>
    { return Operator.E; }
    |
    <NOT_EQUALS>
    { return Operator.N_E; }
    |
    <GREATER>
    { return Operator.G; }
    |
    <LESS>
    { return Operator.L; }
    |
    <GREATER_EQUALS>
    { return Operator.GE; }
    |
    <LESS_EQUALS>
    { return Operator.LE; }
    |
    <LIKE>
    { return Operator.LIKE; }
}

private Value value():
{
    Token token;
}
{
    token = <ATTRIBUTE>
    { return resolveAttribute.apply(removeFirstAndLast(token.image)); }
    |
    <NULL>
    { return new Value(null,null);}
    |
    token = <NUMBERS>
    { return new Value(token.image, Type.NUMBER);}
    |
    token = <STRING>
    { return new Value(removeFirstAndLast(token.image), Type.STRING); }
    |
    token = <BOOL>
    { return new Value(token.image, Type.BOOLEAN); }
}